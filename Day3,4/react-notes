 App.js react Basic code template: 
    import React from "react";
    import "./App.css";

    class yourAppName extends React.Component {
    constructor() {
        super();
    }

    render() {}
    }

    export default yourAppName;

============================================================================================

function abc(props){
     return <h1> hi {props.nameDefinedInConst}</h1>;
}

IS THE SAME AS 

class abc extends React.Component{
     render(){
         return(<h1> hi {this.props.nameDefinedInConst} );
   }
}

============================================================================================

array.forEach() needs to be called again to summon the result
array.maps() will summon the result automatically in an array mode

.forEach() + result given in an array = .maps()

============================================================================================

in react :
state CONTAINS the data of the websites. data such as username, id, password, images,etc. hence when data is changed, state is ALSO changed

Example of : state contains the userData :
  *state* = {
    _usersData_: [
      {
        id: 1,
        username: "blake",
        profileImage: "http://next-curriculum-instagram.s3.amazonaws.com/idol2-blake.jpg"
      },
      {
        id: 2,
        username: "ryanG",
        profileImage: "http://next-curriculum-instagram.s3.amazonaws.com/idol1-ryan.jpg"
      },
      {
        id: 3,
        username: "bigfan",
        profileImage: "http://next-curriculum-instagram.s3.amazonaws.com/bigfan-9AE7468E-4C35-41D1-AA68-31939891B5E1.png"
      }
    ]
  }

============================================================================================

  react :
(...) is function
{...} is object
[...] is array

============================================================================================

axios : same idea as JQuery.ajax API call
axios
      axios 
        .get("https://insta.nextacademy.com/api/v1/users") _// get is the method, the link is the API link_
        .then(result => {
          console.log("show me when successful");
        })
        .catch(error => {
          console.log("show me when ERROR", error);
        })
jquery ajax
$.ajax({
   url: "https://next-message-board.herokuapp.com/messages",
   method: "GET",
   success: function(shownMessagesWhenSuccessful) {
     console.log(shownMessagesWhenSuccessful);
   },
    error: function(showMessageWhenError) {
      console.log(showMessageWhenError);
    }
 });

============================================================================================

 prop is property, used for children (loadingScreen.js) folder to call any objects from parents (app.js)

eg : calling list of users,
parent file : this.state.user
children file : this.prop.user

============================================================================================

goal in https://code.nextacademy.com/lessons/react-props/22
to make your app.js tidier, by putting your html codes into homepage.js

============================================================================================

<Route path="/users/:id" component={UserProfilePage} /> the ":" in :id represent wildcard of any id that is selected by user

============================================================================================

the tutorial in the learning platform : https://code.nextacademy.com/lessons/react-router/27 is calling the data from HomePage.js (https://code.nextacademy.com/lessons/home-page-with-api-call/21). and the react-nextagram-mentor-answer are calling directly inside App.js

============================================================================================

{...props} shows EVERYTHING inside the props array

============================================================================================

ternary condition :
{condition ? (do_me_if_true) : (do_me_if_false)}

============================================================================================

every function{} MUST have `return`, or it will show error below:

Expected an assignment or function call and instead saw an expression  no-unused-expressions

============================================================================================

class component CAN have state
function dont have state

============================================================================================

setState explanation on Building tictactoe : 
By calling this.setState from an onClick handler in the Square’s render method, we tell React to re-render that Square whenever its <button> is clicked

============================================================================================

state vs props explained :

To collect data from multiple children, or to have two child components communicate with each other, 
you need to declare the shared state in their parent component instead. 
The parent component can pass the state back down to the children by using props; 
this keeps the child components in sync with each other and with the parent component.

============================================================================================

Good Practice 
first thing to do after axios get/post file, always console.log(result)

    axios
      .get("https://insta.nextacademy.com/api/v1/users")
      .then(result => {
        console.log(result); // good practice, to help visualise the output
        this.setState({
          users: [...result.data]
        });
      })
      .catch(error => console.log(error));
  }



========  HOW TO USE AXIOS STEP BY STEP  ========

  Step 1:
Install axios
npm install axios
​
Step 2:
Import axios
import axios from 'axios';
​
Step 3:
Use axios
​
​
axios
	// Specify the methods, common ones are GET and POST
	// The url of the endpoint
	.get("https://insta.nextacademy.com/api/v1/users")
​
	// When the request succeeds, do something with the response
	.then(resp => {
		// I like to console.log the resp to see what the data look like
		// This way I know what I can do to manipulate and interact with the data
		console.log("resp.data", resp.data);
		// Do something else with the data
		this.setState({
			users: [...resp.data]
		})
	})
	// When the request fails, do something with the error
	.catch(err => {
		console.log(err);
	});
Collapse


============================================================================================
